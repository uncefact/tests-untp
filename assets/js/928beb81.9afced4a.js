"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4576],{8481:(e,t,n)=>{n.d(t,{Ay:()=>o,RM:()=>a});var i=n(4848),s=n(8453);const a=[];function r(e){const t={admonition:"admonition",p:"p",...(0,s.R)(),...e.components};return(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsx)(t.p,{children:"Please note that this content is under development and is not ready for implementation. This status message will be updated as content development progresses."})})}function o(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},9699:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var i=n(4848),s=n(8453),a=n(8481);const r={sidebar_position:5,title:"Configuration"},o=void 0,c={id:"test-suites/semantic-interoperability/cli/configuration",title:"Configuration",description:"Before proceeding, we need to create the configuration file. The Tier 2 test suite config file defines the credentials being tested, the schema version to test against, and the location of the credential being tested.",source:"@site/docs/test-suites/semantic-interoperability/cli/configuration.md",sourceDirName:"test-suites/semantic-interoperability/cli",slug:"/test-suites/semantic-interoperability/cli/configuration",permalink:"/tests-untp/docs/next/test-suites/semantic-interoperability/cli/configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/uncefact/tests-untp/tree/next/documentation/docs/test-suites/semantic-interoperability/cli/configuration.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Configuration"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/tests-untp/docs/next/test-suites/semantic-interoperability/cli/installation"},next:{title:"Usage",permalink:"/tests-untp/docs/next/test-suites/semantic-interoperability/cli/usage"}},l={},d=[...a.RM,{value:"Generating the configuration file",id:"generating-the-configuration-file",level:2},{value:"Structure of the configuration file",id:"structure-of-the-configuration-file",level:2},{value:"Credentials",id:"credentials",level:3},{value:"Schema and version structure",id:"schema-and-version-structure",level:3},{value:"Type",id:"type",level:3},{value:"Version",id:"version",level:3},{value:"Data Path",id:"data-path",level:3},{value:"URL",id:"url",level:3},{value:"Adding test credentials",id:"adding-test-credentials",level:2},{value:"Running the test suite",id:"running-the-test-suite",level:2},{value:"Testing Industry-Specific Extensions of UNTP",id:"testing-industry-specific-extensions-of-untp",level:2},{value:"Example: Testing the Australian Agriculture Traceability Protocol (AATP) Extension",id:"example-testing-the-australian-agriculture-traceability-protocol-aatp-extension",level:3},{value:"Method 1: Local Schema Directory",id:"method-1-local-schema-directory",level:4},{value:"Method 2: Remote Schema URL",id:"method-2-remote-schema-url",level:4},{value:"Developers",id:"developers",level:2},{value:"You can add additional schemas in two ways:",id:"you-can-add-additional-schemas-in-two-ways",level:3},{value:"1. Add Directly to the Configuration File:",id:"1-add-directly-to-the-configuration-file",level:4},{value:"2. Add to Default Model in Code:",id:"2-add-to-default-model-in-code",level:4}];function h(e){const t={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.Ay,{}),"\n",(0,i.jsx)(t.p,{children:"Before proceeding, we need to create the configuration file. The Tier 2 test suite config file defines the credentials being tested, the schema version to test against, and the location of the credential being tested."}),"\n",(0,i.jsx)(t.h2,{id:"generating-the-configuration-file",children:"Generating the configuration file"}),"\n",(0,i.jsx)(t.p,{children:"To generate the configuration file, run the following command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"yarn run untp config\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This will create a base configuration file named ",(0,i.jsx)(t.code,{children:"credentials.json"})," in the base directory of the Tier 2 test suite folder: ",(0,i.jsx)(t.code,{children:"tests-untp/packages/untp-test-suite/credentials.json"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"structure-of-the-configuration-file",children:"Structure of the configuration file"}),"\n",(0,i.jsx)(t.p,{children:"The generated configuration file will have the following structure:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n  "credentials": [\n    {\n      "type": "digitalConformityCredential",\n      "version": "v0.5.0",\n      "dataPath": "",\n      "url": ""\n    },\n    {\n      "type": "digitalFacilityRecord",\n      "version": "v0.5.0",\n      "dataPath": "",\n      "url": ""\n    },\n    {\n      "type": "digitalProductPassport",\n      "version": "v0.5.0",\n      "dataPath": "",\n      "url": ""\n    },\n    {\n      "type": "digitalTraceabilityEvent",\n      "version": "v0.5.0",\n      "dataPath": "",\n      "url": ""\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"credentials",children:"Credentials"}),"\n",(0,i.jsx)(t.p,{children:"The value of the credentials property is an array of objects containing information about the credential type (corresponding to a schema), the credential schema version, and the location of the credential to be tested."}),"\n",(0,i.jsx)(t.h3,{id:"schema-and-version-structure",children:"Schema and version structure"}),"\n",(0,i.jsx)(t.p,{children:"The schemas used in the test suite are located in the following directory structure:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"packages/\n\u2514\u2500\u2500 untp-test-suite/\n    \u2514\u2500\u2500 src/\n        \u2514\u2500\u2500 schemas/\n            \u251c\u2500\u2500 aggregationEvent/\n            \u2502   \u2514\u2500\u2500 v0.0.1/\n            \u2502       \u2514\u2500\u2500 schema.json\n            \u251c\u2500\u2500 conformityCredential/\n            \u2502   \u2514\u2500\u2500 v0.0.1/\n            \u2502       \u2514\u2500\u2500 schema.json\n            \u251c\u2500\u2500 objectEvent/\n            \u2502   \u2514\u2500\u2500 v0.0.1/\n            \u2502       \u2514\u2500\u2500 schema.json\n            \u251c\u2500\u2500 productPassport/\n            \u2502   \u2514\u2500\u2500 v0.0.1/\n            \u2502       \u2514\u2500\u2500 schema.json\n            \u251c\u2500\u2500 transactionEvent/\n            \u2502   \u2514\u2500\u2500 v0.0.1/\n            \u2502       \u2514\u2500\u2500 schema.json\n            \u2514\u2500\u2500 transformationEvent/\n                \u2514\u2500\u2500 v0.0.1/\n                    \u2514\u2500\u2500 schema.json\n"})}),"\n",(0,i.jsx)(t.h3,{id:"type",children:"Type"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"type"})," property value corresponds to the folder name within the ",(0,i.jsx)(t.code,{children:"src/schemas"})," directory of the test suite. This allows logical grouping of schema versions. For example, ",(0,i.jsx)(t.code,{children:'"type": "aggregationEvent"'})," corresponds to the ",(0,i.jsx)(t.code,{children:"aggregationEvent"})," folder."]}),"\n",(0,i.jsx)(t.h3,{id:"version",children:"Version"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"version"})," property value corresponds to the folder name within the respective credential type folder. For example, ",(0,i.jsx)(t.code,{children:'"version": "v0.0.1"'})," corresponds to the ",(0,i.jsx)(t.code,{children:"v0.0.1"})," folder within the credential type folder."]}),"\n",(0,i.jsx)(t.h3,{id:"data-path",children:"Data Path"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"dataPath"})," value is the relative location of the credential you want to test against the schema type and version."]}),"\n",(0,i.jsx)(t.h3,{id:"url",children:"URL"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"url"})," property allows you to specify a remote schema URL for testing. When provided, this URL takes precedence and the test suite will use the remote schema instead of looking up the local schema based on ",(0,i.jsx)(t.code,{children:"type"})," and ",(0,i.jsx)(t.code,{children:"version"}),". This is useful when you want to test against schemas hosted elsewhere."]}),"\n",(0,i.jsx)(t.h2,{id:"adding-test-credentials",children:"Adding test credentials"}),"\n",(0,i.jsx)(t.p,{children:"Follow these steps to validate your UNTP implementation's credentials against the core UNTP data model specifications:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Navigate to the test suite directory:"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"cd packages/untp-test-suite\n"})}),"\n",(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsxs)(t.li,{children:["Add your credential files to the appropriate subdirectory under ",(0,i.jsx)(t.code,{children:"credentials/"}),". The directory structure should match the credential type:"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"packages/\n\u2514\u2500\u2500 untp-test-suite/\n    \u2514\u2500\u2500 credentials/\n        \u251c\u2500\u2500 conformityCredential/\n        \u2502   \u2514\u2500\u2500 DigitalConformityCredential_instance-v0.5.0.\n        \u251c\u2500\u2500 digitalFacilityRecord/\n        \u2502   \u2514\u2500\u2500 DigitalFacilityRecord_instance-v0.5.0.json\n        \u251c\u2500\u2500 productPassport/\n        \u2502   \u2514\u2500\u2500 DigitalProductPassport_instance-v0.5.0.json\n        \u2514\u2500\u2500 traceabilityEvents/\n            \u2514\u2500\u2500 DigitalTraceabilityEvent_instance-v0.5.0.json\n"})}),"\n",(0,i.jsxs)(t.ol,{start:"3",children:["\n",(0,i.jsxs)(t.li,{children:["Update the config file (",(0,i.jsx)(t.code,{children:"credentials.json"}),") to point to your credential files:"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n  "credentials": [\n    {\n      "type": "digitalConformityCredential",\n      "version": "v0.5.0",\n      "dataPath": "credentials/conformityCredential/DigitalConformityCredential_instance-v0.5.0.json",\n      "url": ""\n    },\n    {\n      "type": "digitalFacilityRecord",\n      "version": "v0.5.0",\n      "dataPath": "credentials/digitalFacilityRecord/DigitalFacilityRecord_instance-v0.5.0.json",\n      "url": ""\n    },\n    {\n      "type": "digitalProductPassport",\n      "version": "v0.5.0",\n      "dataPath": "credentials/productPassport/DigitalProductPassport_instance-v0.5.0.json",\n      "url": ""\n    },\n    {\n      "type": "digitalTraceabilityEvent",\n      "version": "v0.5.0",\n      "dataPath": "credentials/traceabilityEvents/DigitalTraceabilityEvent_instance-v0.5.0.json",\n      "url": ""\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Each credential entry in the configuration should specify:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"type"}),": The credential type (matching the schema directory name)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"version"}),": The schema version to test against"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"dataPath"}),": Relative path to your credential file"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"url"}),": Optional URL to a remote schema (leave empty to use local schemas)"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"You have now successfully configured the Tier 2 test suite to test your credentials against the core UNTP data model."}),"\n",(0,i.jsx)(t.h2,{id:"running-the-test-suite",children:"Running the test suite"}),"\n",(0,i.jsx)(t.p,{children:"Once your configuration file is set up, run the test suite with the following command:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"cd packages/untp-test-suite\nyarn run untp test\n"})}),"\n",(0,i.jsx)(t.h2,{id:"testing-industry-specific-extensions-of-untp",children:"Testing Industry-Specific Extensions of UNTP"}),"\n",(0,i.jsx)(t.p,{children:"The Tier 2 test suite not only supports the core UNTP data model but also allows testing of industry-specific extensions, such as the Australian Agriculture Traceability Protocol (AATP) or the UN Critical Raw Materials Transparency Protocol (CRMTP)."}),"\n",(0,i.jsx)(t.p,{children:"This flexibility enables implementors to verify conformance with both the core UNTP data models and their specific industry extensions."}),"\n",(0,i.jsx)(t.h3,{id:"example-testing-the-australian-agriculture-traceability-protocol-aatp-extension",children:"Example: Testing the Australian Agriculture Traceability Protocol (AATP) Extension"}),"\n",(0,i.jsx)(t.p,{children:"In this example, we'll demonstrate how to test the Australian Agriculture Traceability Protocol (AATP) extension using a Digital Livestock Passport (DLP). There are two ways to provide your extension schema for testing:"}),"\n",(0,i.jsx)(t.h4,{id:"method-1-local-schema-directory",children:"Method 1: Local Schema Directory"}),"\n",(0,i.jsx)(t.p,{children:"Add your extension schema to the core schemas directory:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"packages/\n\u2514\u2500\u2500 untp-test-suite/\n    \u251c\u2500\u2500 src/\n    \u2502   \u2514\u2500\u2500 schemas/  # All schemas live here\n    \u2502       \u251c\u2500\u2500 digitalProductPassport/\n    \u2502       \u2502   \u2514\u2500\u2500 v0.5.0/\n    \u2502       \u2502       \u2514\u2500\u2500 schema.json\n    \u2502       \u251c\u2500\u2500 digitalLivestockPassport/ # Your extension\n    \u2502       \u2502   \u2514\u2500\u2500 v0.5.0/\n    \u2502       \u2502       \u2514\u2500\u2500 schema.json\n    \u2502       \u2514\u2500\u2500 ...\n    \u2502\n    \u251c\u2500\u2500 credentials/ # Test credentials directory\n    \u2502   \u2514\u2500\u2500 aatp/\n    \u2502       \u2514\u2500\u2500 livestock/\n    \u2502           \u2514\u2500\u2500 DigitalLivestockPassport_instance-v0.5.0.json\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Then reference it in your ",(0,i.jsx)(t.code,{children:"credentials.json"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n  "credentials": [\n    {\n      "type": "digitalLivestockPassport",\n      "version": "v0.5.0",\n      "dataPath": "credentials/aatp/livestock/DigitalLivestockPassport_instance-v0.5.0.json",\n      "url": ""\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"cd packages/untp-test-suite\nyarn build\nyarn run untp test\n"})}),"\n",(0,i.jsx)(t.h4,{id:"method-2-remote-schema-url",children:"Method 2: Remote Schema URL"}),"\n",(0,i.jsx)(t.p,{children:"Alternatively, you can reference a remotely hosted schema:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n  "credentials": [\n    {\n      "type": "digitalLivestockPassport",\n      "version": "v0.5.0",\n      "dataPath": "credentials/aatp/livestock/DigitalLivestockPassport_instance-v0.5.0.json",\n      "url": "https://example.com/schemas/dlp/0.5.0/digitalLivestockPassport.json"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"cd packages/untp-test-suite\nyarn run untp test\n"})}),"\n",(0,i.jsx)(t.p,{children:"When using a remote URL, the test suite will fetch the schema from the specified location instead of looking in the local schemas directory."}),"\n",(0,i.jsx)(t.h2,{id:"developers",children:"Developers"}),"\n",(0,i.jsx)(t.h3,{id:"you-can-add-additional-schemas-in-two-ways",children:"You can add additional schemas in two ways:"}),"\n",(0,i.jsx)(t.h4,{id:"1-add-directly-to-the-configuration-file",children:"1. Add Directly to the Configuration File:"}),"\n",(0,i.jsx)(t.p,{children:"You can add an object representing the schema type and version directly to the credentials array in the configuration file, for example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n  "type": "objectEvent",\n  "version": "v0.3.10",\n  "dataPath": "",\n  "url": ""\n}\n'})}),"\n",(0,i.jsx)(t.h4,{id:"2-add-to-default-model-in-code",children:"2. Add to Default Model in Code:"}),"\n",(0,i.jsxs)(t.p,{children:["You can also add the name of the schema type to the ",(0,i.jsx)(t.code,{children:"untpDefaultModel"})," in the packages/untp-test-suite/src/interfaces/utils/credentials.ts file as follows:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"export const untpDefaultModel = [\n  'digitalTraceabilityEvent',\n  'digitalProductPassport',\n  'digitalFacilityRecord',\n  'digitalConformityCredential',\n  'objectEvent',\n];\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Please remove the current ",(0,i.jsx)(t.code,{children:"credentials.json"})," file, run ",(0,i.jsx)(t.code,{children:"yarn build"})," and run the command ",(0,i.jsx)(t.code,{children:"yarn run untp config"})," to generate a new configuration file with the updated schema types."]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(6540);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);