"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3706],{18481:(e,n,t)=>{t.d(n,{Ay:()=>d,RM:()=>r});var i=t(74848),a=t(28453);const r=[];function s(e){const n={admonition:"admonition",p:"p",...(0,a.R)(),...e.components};return(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Please note that this content is under development and is not ready for implementation. This status message will be updated as content development progresses."})})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}},46394:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var i=t(74848),a=t(28453),r=t(18481);const s={sidebar_position:51,title:"QR Code Scanner Dialog Button"},d=void 0,o={id:"mock-apps/components/qr-code-scanner-dialog-button",title:"QR Code Scanner Dialog Button",description:"Description",source:"@site/docs/mock-apps/components/qr-code-scanner-dialog-button.md",sourceDirName:"mock-apps/components",slug:"/mock-apps/components/qr-code-scanner-dialog-button",permalink:"/tests-untp/docs/next/mock-apps/components/qr-code-scanner-dialog-button",draft:!1,unlisted:!1,editUrl:"https://github.com/uncefact/tests-untp/tree/next/documentation/docs/mock-apps/components/qr-code-scanner-dialog-button.md",tags:[],version:"current",sidebarPosition:51,frontMatter:{sidebar_position:51,title:"QR Code Scanner Dialog Button"},sidebar:"tutorialSidebar",previous:{title:"Import Button",permalink:"/tests-untp/docs/next/mock-apps/components/import-button"},next:{title:"Services",permalink:"/tests-untp/docs/next/mock-apps/services/"}},c={},l=[...r.RM,{value:"Description",id:"description",level:2},{value:"Example app-config",id:"example-app-config",level:2},{value:"Diagram",id:"diagram",level:2},{value:"Definitions",id:"definitions",level:2},{value:"Props",id:"props",level:3},{value:"Data Structure",id:"data-structure",level:2},{value:"Example data structure",id:"example-data-structure",level:3}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.Ay,{}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"The QRCodeScannerDialogButton component is responsible for rendering a button that allows the user to scan a QR code. The component will return the data that is scanned by the user."}),"\n",(0,i.jsx)(n.h2,{id:"example-app-config",children:"Example app-config"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "name": "QRCodeScannerDialogButton",\n  "type": "EntryData",\n  "props": {\n    "style": { "margin": "40px auto", "paddingTop": "40px", "width": "80%" }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"diagram",children:"Diagram"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant U as User\n    participant MA as Mock App\n    participant V as VCKit\n\n    U->>MA: Scan QRCode\n    MA->>MA: Fetch data from QRCode URL\n    alt is verifiable credential\n        MA->>V: Verify VC\n        V--\x3e>MA: Return verified result\n        alt is verified\n            alt is enveloped verifiable credential\n                MA->>MA: Decode enveloped VC\n            else is embedded verifiable credential\n                MA->>U: Return data\n            end\n        end\n    else is JSON\n        MA->>U: Return data\n    end"}),"\n",(0,i.jsx)(n.h2,{id:"definitions",children:"Definitions"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"name"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:'The name of the component(should be "QRCodeScannerDialogButton")'}),(0,i.jsx)(n.td,{children:"String"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"type"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:'The type of the component (should be "EntryData")'}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/docs/mock-apps/common/component-type",children:"ComponentType"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"props"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"The properties for the QRCodeScannerDialogButton"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/docs/mock-apps/components/qr-code-scanner-dialog-button#props",children:"Props"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"props",children:"Props"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"style"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"The style for the component"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/docs/mock-apps/common/style",children:"Style"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"type"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"The type of data (should be 'VerifiableCredential' and 'JSON'), the default is 'VerifiableCredential'"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/docs/mock-apps/common/payload-type",children:"PayloadType"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"vcOptions"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"The options for the VC data processing"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/docs/mock-apps/configuration/vc-component-config",children:"VC component configuration"})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"data-structure",children:"Data Structure"}),"\n",(0,i.jsxs)(n.p,{children:["The data payload of the QR code URL will should be any JSON object. The component will fetch the data from the URL and return the data to the user. The returned data will be an array with one object that has the key as the URL of the QR code and the value as the data that is fetched from the URL.\nIn the case of a verifiable credential, the data will be verified based on the ",(0,i.jsx)(n.code,{children:"vcOptions"})," provided in the component. When the data is enveloped VC, the component will decode the enveloped VC and return as the same level path as the original VC."]}),"\n",(0,i.jsx)(n.h3,{id:"example-data-structure",children:"Example data structure"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"When import a file that contains a JSON object:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// imported JSON file\n{\n  "name": "Alice",\n  "age": 25\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The return data will be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// return data\n[\n  {\n    "data.json": {\n      "name": "Alice",\n      "age": 25\n    }\n  }\n]\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"When import a file that contains a VC and the vcOptions is set as below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// vcOptions\n{\n  "credentialPath": "/",\n  "vckitAPIUrl": "https://vckit-api.com",\n  "headers": { "Authorization": "Bearer test" }\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// imported VC file\n{\n  "@context": ["https://www.w3.org/ns/credentials/v2"],\n  "type": ["VerifiableCredential"],\n  "credentialSubject": {\n    "id": "did:example:123",\n    "name": "Alice"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The return data will be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// return data\n[\n  {\n    "VC1.json": {\n      "@context": ["https://www.w3.org/ns/credentials/v2"],\n      "type": ["VerifiableCredential"],\n      "credentialSubject": {\n        "id": "did:example:123",\n        "name": "Alice"\n      }\n    }\n  }\n]\n'})}),"\n",(0,i.jsx)(n.p,{children:"The imported data will be verified and return the original VC."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"When import a file that contains a enveloped VC and the vcOptions is set as below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// vcOptions\n{\n  "credentialPath": "/",\n  "vckitAPIUrl": "https://vckit-api.com",\n  "headers": { "Authorization": "Bearer test123" }\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// imported VC file\n{\n  "@context": ["https://www.w3.org/ns/credentials/v2"],\n  "id": "data:application/vc-ld+jwt,jwt",\n  "type": "EnvelopedVerifiableCredential"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The return data will be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// return data\n[\n  {\n    "VC1.json": {\n      "vc": {\n        "@context": ["https://www.w3.org/ns/credentials/v2"],\n        "id": "data:application/vc-ld+jwt,jwt",\n        "type": "EnvelopedVerifiableCredential"\n      },\n      "decodedEnvelopedVC": {\n        "@context": ["https://www.w3.org/ns/credentials/v2"],\n        "type": ["VerifiableCredential"],\n        "credentialSubject": {\n          "id": "did:example:123",\n          "name": "Alice"\n        }\n      }\n    }\n  }\n]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Based on the above example, the imported data will be verified and transformed to an object that contains the original VC and the decoded VC."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var i=t(96540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);