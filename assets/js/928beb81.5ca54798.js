"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4576],{8481:(e,n,t)=>{t.d(n,{Ay:()=>r,RM:()=>o});var i=t(4848),s=t(8453);const o=[];function a(e){const n={admonition:"admonition",p:"p",...(0,s.R)(),...e.components};return(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Please note that this content is under development and is not ready for implementation. This status message will be updated as content development progresses."})})}function r(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},9699:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var i=t(4848),s=t(8453),o=t(8481);const a={sidebar_position:5,title:"Configuration"},r=void 0,c={id:"test-suites/semantic-interoperability/cli/configuration",title:"Configuration",description:"Before proceeding, we need to create the configuration file. The Tier 2 test suite config file defines the credentials being tested, the schema version to test against, and the location of the credential being tested.",source:"@site/docs/test-suites/semantic-interoperability/cli/configuration.md",sourceDirName:"test-suites/semantic-interoperability/cli",slug:"/test-suites/semantic-interoperability/cli/configuration",permalink:"/tests-untp/docs/test-suites/semantic-interoperability/cli/configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/uncefact/tests-untp/tree/main/docs/test-suites/semantic-interoperability/cli/configuration.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Configuration"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/tests-untp/docs/test-suites/semantic-interoperability/cli/installation"},next:{title:"Usage",permalink:"/tests-untp/docs/test-suites/semantic-interoperability/cli/usage"}},d={},l=[...o.RM,{value:"Generating the configuration file",id:"generating-the-configuration-file",level:2},{value:"Structure of the configuration file",id:"structure-of-the-configuration-file",level:2},{value:"Credentials",id:"credentials",level:3},{value:"Schema and version structure",id:"schema-and-version-structure",level:3},{value:"Type",id:"type",level:3},{value:"Version",id:"version",level:3},{value:"Data Path",id:"data-path",level:3},{value:"Adding test credentials",id:"adding-test-credentials",level:2}];function h(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.Ay,{}),"\n",(0,i.jsx)(n.p,{children:"Before proceeding, we need to create the configuration file. The Tier 2 test suite config file defines the credentials being tested, the schema version to test against, and the location of the credential being tested."}),"\n",(0,i.jsx)(n.h2,{id:"generating-the-configuration-file",children:"Generating the configuration file"}),"\n",(0,i.jsx)(n.p,{children:"To generate the configuration file, run the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn run untp config\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will create a base configuration file named ",(0,i.jsx)(n.code,{children:"credentials.json"})," in the base directory of the Tier 2 test suite folder: ",(0,i.jsx)(n.code,{children:"tests-untp/packages/untp-test-suite/credentials.json"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"structure-of-the-configuration-file",children:"Structure of the configuration file"}),"\n",(0,i.jsx)(n.p,{children:"The generated configuration file will have the following structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "credentials": [\n    {\n      "type": "aggregationEvent",\n      "version": "v0.0.1",\n      "dataPath": ""\n    },\n    {\n      "type": "conformityCredential",\n      "version": "v0.0.1",\n      "dataPath": ""\n    },\n    {\n      "type": "objectEvent",\n      "version": "v0.0.1",\n      "dataPath": ""\n    },\n    {\n      "type": "productPassport",\n      "version": "v0.0.1",\n      "dataPath": ""\n    },\n    {\n      "type": "transactionEvent",\n      "version": "v0.0.1",\n      "dataPath": ""\n    },\n    {\n      "type": "transformationEvent",\n      "version": "v0.0.1",\n      "dataPath": ""\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"credentials",children:"Credentials"}),"\n",(0,i.jsx)(n.p,{children:"The value of the credentials property is an array of objects containing information about the credential type (corresponding to a schema), the credential schema version, and the location of the credential to be tested."}),"\n",(0,i.jsx)(n.h3,{id:"schema-and-version-structure",children:"Schema and version structure"}),"\n",(0,i.jsx)(n.p,{children:"The schemas used in the test suite are located in the following directory structure:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"packages/\n\u2514\u2500\u2500 untp-test-suite/\n    \u2514\u2500\u2500 src/\n        \u2514\u2500\u2500 schemas/\n            \u251c\u2500\u2500 aggregationEvent/\n            \u2502   \u2514\u2500\u2500 v0.0.1/\n            \u2502       \u2514\u2500\u2500 schema.json\n            \u251c\u2500\u2500 conformityCredential/\n            \u2502   \u2514\u2500\u2500 v0.0.1/\n            \u2502       \u2514\u2500\u2500 schema.json\n            \u251c\u2500\u2500 objectEvent/\n            \u2502   \u2514\u2500\u2500 v0.0.1/\n            \u2502       \u2514\u2500\u2500 schema.json\n            \u251c\u2500\u2500 productPassport/\n            \u2502   \u2514\u2500\u2500 v0.0.1/\n            \u2502       \u2514\u2500\u2500 schema.json\n            \u251c\u2500\u2500 transactionEvent/\n            \u2502   \u2514\u2500\u2500 v0.0.1/\n            \u2502       \u2514\u2500\u2500 schema.json\n            \u2514\u2500\u2500 transformationEvent/\n                \u2514\u2500\u2500 v0.0.1/\n                    \u2514\u2500\u2500 schema.json\n"})}),"\n",(0,i.jsx)(n.h3,{id:"type",children:"Type"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"type"})," property value corresponds to the folder name within the ",(0,i.jsx)(n.code,{children:"src/schemas"})," directory of the test suite. This allows logical grouping of schema versions. For example, ",(0,i.jsx)(n.code,{children:'"type": "aggregationEvent"'})," corresponds to the ",(0,i.jsx)(n.code,{children:"aggregationEvent"})," folder."]}),"\n",(0,i.jsx)(n.h3,{id:"version",children:"Version"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"version"})," property value corresponds to the folder name within the respective credential type folder. For example, ",(0,i.jsx)(n.code,{children:'"version": "v0.0.1"'})," corresponds to the ",(0,i.jsx)(n.code,{children:"v0.0.1"})," folder within the credential type folder."]}),"\n",(0,i.jsx)(n.h3,{id:"data-path",children:"Data Path"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"dataPath"})," value is the relative location of the credential you want to test against the schema type and version."]}),"\n",(0,i.jsx)(n.h2,{id:"adding-test-credentials",children:"Adding test credentials"}),"\n",(0,i.jsx)(n.p,{children:"To test credentials developed or produced by a UNTP implementation against the core UNTP data model:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create a directory to store the credentials you want to test:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd packages/untp-test-suite\nmkdir credentials\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Add the credentials you want to test to the directory created in the previous step. The files should have unique names and be in JSON format:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"packages/\n\u2514\u2500\u2500 untp-test-suite/\n    \u251c\u2500\u2500 credentials/\n        \u251c\u2500\u2500 aggregationEvent-sample.json\n        \u251c\u2500\u2500 conformityCredential-sample.json\n        \u251c\u2500\u2500 objectEvent-sample.json\n        \u251c\u2500\u2500 productPassport-sample.json\n        \u251c\u2500\u2500 transactionEvent-sample.json\n        \u2514\u2500\u2500 transformationEvent-sample.json\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Update the config file to point to the location of the credential you want to test within the corresponding object and save the file:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "credentials": [\n    {\n      "type": "aggregationEvent",\n      "version": "v0.0.1",\n      "dataPath": "credentials/aggregationEvent-sample.json"\n    },\n    {\n      "type": "conformityCredential",\n      "version": "v0.0.1",\n      "dataPath": "credentials/conformityCredential-sample.json"\n    },\n    {\n      "type": "objectEvent",\n      "version": "v0.0.1",\n      "dataPath": "credentials/objectEvent-sample.json"\n    },\n    {\n      "type": "productPassport",\n      "version": "v0.0.1",\n      "dataPath": "credentials/productPassport-sample.json"\n    },\n    {\n      "type": "transactionEvent",\n      "version": "v0.0.1",\n      "dataPath": "credentials/transactionEvent-sample.json"\n    },\n    {\n      "type": "transformationEvent",\n      "version": "v0.0.1",\n      "dataPath": "credentials/transformationEvent-sample.json"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"You have now successfully configured the Tier 2 test suite to test your credentials against the core UNTP data model."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(6540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);