"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[787],{8481:(e,t,n)=>{n.d(t,{Ay:()=>d,RM:()=>r});var s=n(4848),o=n(8453);const r=[];function i(e){const t={admonition:"admonition",p:"p",...(0,o.R)(),...e.components};return(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"Please note that this content is under development and is not ready for implementation. This status message will be updated as content development progresses."})})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},92:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>h});var s=n(4848),o=n(8453),r=n(8481);const i={sidebar_position:50,title:"Render Check List"},d=void 0,c={id:"mock-apps/components/render-check-list",title:"Render Check List",description:"Description",source:"@site/docs/mock-apps/components/render-check-list.md",sourceDirName:"mock-apps/components",slug:"/mock-apps/components/render-check-list",permalink:"/tests-untp/docs/mock-apps/components/render-check-list",draft:!1,unlisted:!1,editUrl:"https://github.com/uncefact/tests-untp/tree/main/docs/mock-apps/components/render-check-list.md",tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50,title:"Render Check List"},sidebar:"tutorialSidebar",previous:{title:"Conformity Credential Checkbox",permalink:"/tests-untp/docs/mock-apps/components/conformity-credential-checkbox"},next:{title:"Import Button",permalink:"/tests-untp/docs/mock-apps/components/import-button"}},l={},h=[...r.RM,{value:"Description",id:"description",level:2},{value:"Example",id:"example",level:2},{value:"Definitions",id:"definitions",level:2},{value:"Props",id:"props",level:3},{value:"Response Data",id:"response-data",level:2}];function a(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.Ay,{}),"\n",(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(t.p,{children:["The RenderCheckList component is responsible for rendering a list of items with checkboxes. It is a composed component that will load data from another component (",(0,s.jsx)(t.a,{href:"./import-button",children:"Import Button"})," and ",(0,s.jsx)(t.a,{href:"./qr-code-scanner-dialog-button",children:"QR Code Scanner Dialog Button"}),"), when the user clicks to import or scan a QR code. The component will render a list of items with checkboxes, the labels of the checkboxes will be the identifiers of the items that are loaded from the data with the path is configured at ",(0,s.jsx)(t.code,{children:"requiredFieldPath"})," field."]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "name": "RenderCheckList",\n  "type": "EntryData",\n  "props": {\n    "requiredFieldPath": "/vc/credentialSubject/eventID",\n    "checkBoxLabel": "Imported valid json:",\n    "nestedComponents": [\n      {\n        "name": "ImportButton",\n        "type": "EntryData",\n        "props": {\n          "label": "Import JSON",\n          "style": { "margin": "40px auto", "paddingTop": "40px", "width": "80%" }\n        }\n      },\n      {\n        "name": "QRCodeScannerDialogButton",\n        "type": "EntryData"\n      }\n    ],\n    "style": { "margin": "40px auto", "paddingTop": "40px", "width": "80%" }\n  }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"definitions",children:"Definitions"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Required"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"name"}),(0,s.jsx)(t.td,{children:"Yes"}),(0,s.jsx)(t.td,{children:'The name of the component(should be "RenderCheckList")'}),(0,s.jsx)(t.td,{children:"String"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"type"}),(0,s.jsx)(t.td,{children:"Yes"}),(0,s.jsx)(t.td,{children:'The type of the component (should be "EntryData")'}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/docs/mock-apps/common/component-type",children:"ComponentType"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"props"}),(0,s.jsx)(t.td,{children:"Yes"}),(0,s.jsx)(t.td,{children:"The properties for the RenderCheckList"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"/docs/mock-apps/components/render-check-list#props",children:"Props"})})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"props",children:"Props"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Required"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Type"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"requiredFieldPath"}),(0,s.jsx)(t.td,{children:"Yes"}),(0,s.jsx)(t.td,{children:"The path for the label of the checkbox item"}),(0,s.jsx)(t.td,{children:"String"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"nestedComponents"}),(0,s.jsx)(t.td,{children:"Yes"}),(0,s.jsx)(t.td,{children:"An array of components to be rendered with the loaded data"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.a,{href:"/docs/mock-apps/components/",children:"Component"}),"[]"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"checkBoxLabel"}),(0,s.jsx)(t.td,{children:"Yes"}),(0,s.jsx)(t.td,{children:"The label for the checkbox list"}),(0,s.jsx)(t.td,{children:"String"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"style"}),(0,s.jsx)(t.td,{children:"No"}),(0,s.jsx)(t.td,{children:"The style for the component"}),(0,s.jsx)(t.td,{children:"Object"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"response-data",children:"Response Data"}),"\n",(0,s.jsx)(t.p,{children:"The component will return an object with data that is selected by the user from the list of checkboxes. The object will have the following structure:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "0123456789": {\n    // Imported data\n  },\n  "9876543210": {\n    // Imported data\n  }\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);