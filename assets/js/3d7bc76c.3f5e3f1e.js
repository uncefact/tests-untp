"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7606],{8481:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>a});var i=t(4848),r=t(8453);const a=[];function o(e){const n={admonition:"admonition",p:"p",...(0,r.R)(),...e.components};return(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Please note that this content is under development and is not ready for implementation. This status message will be updated as content development progresses."})})}function s(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},2192:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var i=t(4848),r=t(8453),a=t(8481);const o={sidebar_position:41,title:"Verify App"},s=void 0,p={id:"mock-apps/verify-app",title:"Verify App",description:"Description",source:"@site/docs/mock-apps/verify-app.md",sourceDirName:"mock-apps",slug:"/mock-apps/verify-app",permalink:"/tests-untp/docs/mock-apps/verify-app",draft:!1,unlisted:!1,editUrl:"https://github.com/uncefact/tests-untp/tree/main/docs/mock-apps/verify-app.md",tags:[],version:"current",sidebarPosition:41,frontMatter:{sidebar_position:41,title:"Verify App"},sidebar:"tutorialSidebar",previous:{title:"Scanning App",permalink:"/tests-untp/docs/mock-apps/scanning-app"},next:{title:"Conformity Credential",permalink:"/tests-untp/docs/mock-apps/conformity-credential"}},c={},d=[...a.RM,{value:"Description",id:"description",level:2},{value:"Overall Flow Diagram",id:"overall-flow-diagram",level:2}];function l(e){const n={a:"a",h2:"h2",mermaid:"mermaid",p:"p",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.Ay,{}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["The Verify App is a crucial component of the ",(0,i.jsx)(n.a,{href:"/docs/mock-apps/scanning-app",children:"Scanning App"}),", responsible for verifying UNTP credentials and displaying the verified credentials. It handles the decryption of encrypted Verifiable Credentials (VCs), verification through a dedicated service, and presentation of the results to the user. The main entrypoints into the Verify App are through the ",(0,i.jsx)(n.a,{href:"/docs/mock-apps/scanning-app",children:"Scanning App"})," or by a ",(0,i.jsx)(n.a,{href:"/docs/mock-apps/common/verify-link",children:"Verify Link"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"overall-flow-diagram",children:"Overall Flow Diagram"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant U as User\n    participant V as Verify App\n    participant SS as Storage Service\n    participant VS as Verification Service\n    U->>V: Access Verify App\n    V->>SS: Fetch VC\n    SS--\x3e>V: Return VC\n    V->>V: Decrypt VC (if required)\n    V->>V: Compute Hash (if required)\n    V->>VS: Send VC for Verification\n    VS--\x3e>V: Return Verification Result\n    V->>V: Render Verified Credential\n    V->>U: Display Verification Result and Credential"})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(6540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);